import { GlobalData } from './global';
import { RequestData } from './request';
import { Database } from './database';
import { Session } from './session';
interface BaseResult {
    status: number;
}
export interface EmptyResult extends BaseResult {
}
export interface TextResult extends BaseResult {
    text: string;
}
export interface JsonResult extends BaseResult {
    json: Record<string, any>;
}
export interface RedirectResult extends BaseResult {
    redirect: string;
}
export interface PageResult extends BaseResult {
    page: string;
    frontmatter?: Record<string, any>;
}
export interface FragmentResult extends BaseResult {
    fragment: string;
    frontmatter?: Record<string, any>;
}
export declare type ControllerStandardResult = EmptyResult | TextResult | RedirectResult | JsonResult | PageResult | FragmentResult;
export declare type ControllerResult = ControllerStandardResult | Promise<ControllerStandardResult>;
export declare type ControllerFunction = (data: {
    global: GlobalData;
    request: RequestData;
    session: Session;
}, database: Database) => ControllerResult;
export declare type FunctionName = string;
export declare type Controller = Record<FunctionName, ControllerFunction>;
export {};
