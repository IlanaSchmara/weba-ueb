'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Request = void 0;
const axios_1 = require("axios");
const url = require("url"); //see https://stackoverflow.com/a/34520891
const helper_1 = require("../helper");
class Request {
    constructor(config, logging) {
        this.config = config;
        this.logging = logging;
    }
    sendNuChecker(html) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data } = yield axios_1.default.post('https://validator.w3.org/nu/?out=json', html, {
                    headers: {
                        "Content-Type": "text/html",
                        "charset": "utf-8"
                    }
                });
                if (!helper_1.isDefined(data.messages)) {
                    throw new Error(`Invalid or unexpected Validation-Response: ${data}`);
                }
                return data.messages;
            }
            catch (e) {
                this.logging.error(`Could not reach the validation service. Received following error: ${e}`);
                return [];
            }
        });
    }
    getStylesheet(path) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const host = this.config.host;
                const port = this.config.port;
                const _url = url.resolve(`http://${host}:${port}/`, path);
                const { data } = yield axios_1.default.get(_url, {
                    headers: {
                        "Content-Type": "text/css",
                        "charset": "utf-8",
                        "User-Agent": "fhw-web/1.0.0 (Internal Call to fetch Stylesheet)"
                    }
                });
                return data;
            }
            catch (_) {
                this.logging.error(`Could not fetch stylesheet "${path}" for validating`);
                return '';
            }
        });
    }
}
exports.Request = Request;
