'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileDataService = void 0;
const helper_1 = require("../helper");
class FileDataService {
    constructor(config, logging, fileUtils) {
        this.config = config;
        this.logging = logging;
        this.fileUtils = fileUtils;
    }
    normalizeFilename(filename) {
        return filename.endsWith('.json') ? filename : `${filename}.json`;
    }
    loadJson(filename) {
        if (!helper_1.isDefined(filename) && (typeof filename !== 'string')) {
            throw new Error('Error while executing "loadJson": either filename is missing or is not of type string.');
        }
        filename = this.normalizeFilename(filename);
        return helper_1.isDefined(this.data[filename])
            ? JSON.parse(JSON.stringify(this.data[filename]))
            : null;
    }
    saveJson(filename, data) {
        if (!helper_1.isDefined(filename) && (typeof filename !== 'string')) {
            throw new Error('Error while executing "saveJson": either filename is missing or is not of type string.');
        }
        if (!helper_1.isDefined(data)) {
            throw new Error('Error while executing "saveJson": data, which has to be saved, is missing.');
        }
        filename = this.normalizeFilename(filename);
        this.data[filename] = data;
    }
    // TODO: Unhandled Promise Rejection
    _build() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = {};
            const files = yield this.fileUtils.listFiles({
                directory: this.config.path, recursively: true
            });
            yield Promise.all(files.map((filename) => __awaiter(this, void 0, void 0, function* () {
                if (filename.endsWith(`.${this.config.format}`)) {
                    result[filename] = yield this.fileUtils.readJson(filename, this.config.path);
                }
            })));
            this.data = result;
        });
    }
    build() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config.active) {
                yield this._build();
            }
            return this;
        });
    }
    reload() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config.reloadOnEveryRequest) {
                yield this.build();
            }
        });
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config.active) {
                yield Promise.all(Object.keys(this.data).map((filename) => __awaiter(this, void 0, void 0, function* () {
                    filename = this.normalizeFilename(filename);
                    yield this.fileUtils.writeJson(this.data[filename], filename, this.config.path);
                })));
            }
        });
    }
}
exports.FileDataService = FileDataService;
