'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlDataService = void 0;
const database_1 = require("../../public/database");
const InitSqlJs = require('sql.js');
const escapeSqlString = require('sql-string-escape');
const helper_1 = require("../helper");
class SqlDataService {
    constructor(config, logging, fileUtils) {
        this.config = config;
        this.logging = logging;
        this.fileUtils = fileUtils;
    }
    _build() {
        return __awaiter(this, void 0, void 0, function* () {
            const dataPath = this.fileUtils.fullPath(this.config.pathToFile);
            const SQL = yield InitSqlJs();
            const filebuffer = yield this.fileUtils.readBuffer(dataPath);
            this.sqliteDatabase = new SQL.Database(filebuffer);
        });
    }
    build() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config.active) {
                yield this._build();
            }
            return this;
        });
    }
    reload() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config.reloadOnEveryRequest) {
                yield this.build();
            }
        });
    }
    flattenParams(p) {
        const result = {};
        const strategy = (obj, key, result) => {
            if (!helper_1.hasKeys(obj[key])) {
                result[key] = obj[key];
            }
        };
        const iterate = (obj, strategy, result) => {
            if (helper_1.hasKeys(obj)) {
                Object.keys(obj).forEach(key => {
                    strategy(obj, key, result);
                    iterate(obj[key], strategy, result);
                });
            }
        };
        iterate(p, strategy, result);
        return result;
    }
    prepareSql(sql, params) {
        const flattenedParams = this.flattenParams(params);
        const paramsRegex = /(([:@$])([\w\d]*))/g;
        const preparedSql = Array.from(sql.matchAll(paramsRegex)).reduce((acc, [_, match, prefix, name]) => {
            const replacement = flattenedParams[name];
            if (helper_1.isDefined(replacement)) {
                return acc.replace(match, escapeSqlString(replacement));
            }
            else {
                throw new Error(`SQL: Can not execute SQL statement. No parameter defined for ${match}.`);
            }
        }, sql);
        return preparedSql;
    }
    convertSqlResult(result) {
        if (helper_1.isDefined(result) && helper_1.isDefined(result[0])
            && helper_1.isDefined(result[0].columns) && helper_1.isDefined(result[0].values)) {
            const columns = result[0].columns;
            const values = result[0].values;
            return values.map(row => {
                return row.reduce((acc, val, idx) => (Object.assign(Object.assign({}, acc), { [columns[idx]]: val })), {});
            });
        }
        else {
            return [];
        }
    }
    _executeSql(sql, params) {
        const preparedSql = this.prepareSql(sql, params);
        try {
            const sqlDriverResult = this.sqliteDatabase.exec(preparedSql);
            return this.convertSqlResult(sqlDriverResult);
        }
        catch (err) {
            throw new Error(`SQL Error: ${err}`);
        }
    }
    query(sql, params) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config.active) {
                return this._executeSql(sql, params);
            }
            else {
                return [];
            }
        });
    }
    parseAndExecuteSql(obj, params) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.config.active || !helper_1.hasKeys(obj)) {
                return obj;
            }
            if (!Object.keys(obj).includes('query')) {
                yield Promise.all(Object.keys(obj).map((key) => __awaiter(this, void 0, void 0, function* () {
                    obj[key] = yield this.parseAndExecuteSql(obj[key], params);
                })));
                return obj;
            }
            const resultType = obj['result'] && database_1.AllResultTypes.includes(obj['result'])
                ? obj['result']
                : 'mixed';
            const sqlResult = yield this.query(obj['query'], params);
            if (resultType === 'array') {
                return sqlResult;
            }
            const objResult = helper_1.isDefined(sqlResult) && helper_1.isDefined(sqlResult[0])
                ? Object.keys(sqlResult[0]).reduce((acc, key) => {
                    acc[`_${key}`] = sqlResult[0][key];
                    return acc;
                }, {})
                : {};
            if (resultType === 'object') {
                return objResult;
            }
            const mixedResult = Object.assign([], sqlResult, objResult);
            return mixedResult;
        });
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config.active) {
                const dataPath = this.fileUtils.fullPath(this.config.pathToFile);
                const data = this.sqliteDatabase.export();
                const buffer = Buffer.from(data);
                yield this.fileUtils.writeBuffer(buffer, dataPath);
            }
        });
    }
}
exports.SqlDataService = SqlDataService;
