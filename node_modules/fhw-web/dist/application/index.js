'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = void 0;
const http_1 = require("./http");
const request_1 = require("./request");
const response_service_1 = require("./response-service");
const render_engine_1 = require("./render-engine");
const validator_1 = require("./validator");
const database_1 = require("./database");
class Application {
    constructor(config, logService, fileUtils) {
        this.config = config;
        this.logService = logService;
        this.fileUtils = fileUtils;
    }
    buildServer() {
        return __awaiter(this, void 0, void 0, function* () {
            const databaseService = yield new database_1.DatabaseService(this.config.database, this.logService, this.fileUtils).build();
            const renderEngine = yield new render_engine_1.RenderEngine(this.config.templating, this.logService.create('templating', this.config.templating.logging), this.fileUtils, databaseService).build();
            const request = new request_1.Request(this.config.server, this.logService.create('server', this.config.server.logging));
            const validator = new validator_1.Validator(this.config.templating, this.logService.create('validation', this.config.templating.logging), this.fileUtils, request);
            const responseService = yield new response_service_1.ResponseService(this.config, this.logService.create('routing', this.config.routing.logging), this.fileUtils, renderEngine, validator, databaseService).build();
            this.server = new http_1.Server(this.config, this.logService, this.fileUtils, responseService);
            yield this.server.build();
        });
    }
    startServer() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.server.start();
        });
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.buildServer();
            yield this.startServer();
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.server && this.server.listening) {
                yield this.server.close();
            }
        });
    }
}
exports.Application = Application;
