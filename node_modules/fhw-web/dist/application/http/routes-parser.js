'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoutesParser = void 0;
const helper_1 = require("../helper");
const route_1 = require("../route");
class RoutesParser {
    constructor(config, logging, fileUtils) {
        this.config = config;
        this.logging = logging;
        this.fileUtils = fileUtils;
        this.routesDefinitionFilename = {
            ts: this.fileUtils.fullPath('routes.ts'),
            json: this.fileUtils.fullPath('routes.json')
        };
    }
    parseRoutesDefinitionFile() {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.fileUtils.exist(this.routesDefinitionFilename.ts)) {
                const routesFile = require(this.routesDefinitionFilename.ts);
                if (!helper_1.isDefined(routesFile.Routes)) {
                    throw new Error('Die "routes.ts" Datei muss eine Konstante "Routes" vom Typen "Route[]" exportieren (export const Routes: Routes[] = [])');
                }
                const json = routesFile.Routes;
                return route_1.parseRoutes(json);
            }
            else if (yield this.fileUtils.exist(this.routesDefinitionFilename.json)) {
                try {
                    const json = yield this.fileUtils
                        .readJson(this.routesDefinitionFilename.json);
                    return route_1.parseRoutes(json);
                }
                catch (err) {
                    throw new Error(`Fehler beim Einlesen der Routen-Definition: ${err.message}`);
                }
            }
            if (this.config.magic) {
                return route_1.MagicRoutes;
            }
            else {
                throw new Error('Es wurde keine Routen-Definitionsdatei gefunden; die ist erforderlich, da die "MagicRoutes"-Konfiguration deaktiviert ist.');
            }
        });
    }
}
exports.RoutesParser = RoutesParser;
