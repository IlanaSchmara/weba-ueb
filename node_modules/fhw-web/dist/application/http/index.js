'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const express = require("express"); //see https://stackoverflow.com/a/34520891
const cors = require('cors');
const cookieParser = require("cookie-parser"); //and again...
const helper_1 = require("../helper");
const router_1 = require("./router");
var request_1 = require("./request");
Object.defineProperty(exports, "parseRequest", { enumerable: true, get: function () { return request_1.parseRequest; } });
var method_1 = require("./method");
Object.defineProperty(exports, "parseMethod", { enumerable: true, get: function () { return method_1.parseMethod; } });
var session_service_1 = require("./session-service");
Object.defineProperty(exports, "SessionService", { enumerable: true, get: function () { return session_service_1.SessionService; } });
class Server {
    constructor(config, logService, fileUtils, responseService) {
        this.config = config;
        this.logService = logService;
        this.fileUtils = fileUtils;
        this.responseService = responseService;
        this.logging = this.logService.create('server', this.config.server.logging);
    }
    build() {
        return __awaiter(this, void 0, void 0, function* () {
            this.app = express();
            this.app.use(cors());
            this.app.use(express.urlencoded({ extended: true }));
            this.app.use(express.json());
            this.app.use(cookieParser());
            const router = new router_1.Router(this.config, this.logService, this.fileUtils, this.responseService);
            yield router.plugIn(this.app);
        });
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            this.httpServer = this.app.listen(this.config.server.port, () => {
                this.logging.info(`Server is listening on port ${this.config.server.port}`);
            });
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    get listening() {
        return helper_1.isDefined(this.httpServer) && this.httpServer.listening;
    }
}
exports.Server = Server;
