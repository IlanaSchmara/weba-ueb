'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkResponse = void 0;
const helper_1 = require("../helper");
exports.checkResponse = (response) => {
    const checkAndThrowError = (shouldThrow, type, property) => {
        if (shouldThrow) {
            const propertyHint = helper_1.isDefined(property) ? ` Missing property "${property}"` : '';
            const message = `Invalid Response Type "${type}".${propertyHint}`;
            throw new Error(message);
        }
    };
    switch (response.type) {
        case 'empty':
            break;
        case 'text/plain':
            checkAndThrowError(!helper_1.isDefined(response.text), response.type, 'text');
            break;
        case 'static':
            checkAndThrowError(!helper_1.isDefined(response.pathToFile), response.type, 'pathToFile');
            break;
        case 'text/html':
            checkAndThrowError(!helper_1.isDefined(response.html), response.type, 'html');
            break;
        case 'application/json':
            checkAndThrowError(!helper_1.isDefined(response.body), response.type, 'body');
            break;
        case 'redirect':
            checkAndThrowError(!helper_1.isDefined(response.redirectLocation), response.type, 'redirectLocation');
            break;
        default:
            //@ts-ignore // TODO: explain
            throw new Error(`Unkown response type: ${response.type}`);
    }
};
