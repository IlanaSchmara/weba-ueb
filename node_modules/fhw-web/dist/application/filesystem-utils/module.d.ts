import { Logging } from '../logging';
import { FileUtils } from './file';
export declare enum ModuleExtension {
    JS = "js",
    TS = "ts"
}
export declare type DynamicModule<T> = {
    name: string;
    _exports: {
        [name: string]: T;
    };
};
export declare type ModuleExportsParser<T> = (_exports: Record<string, any>) => Record<string, T>;
export declare class ModuleLoader<T> {
    protected logging: Logging;
    private fileUtils;
    constructor(logging: Logging, fileUtils: FileUtils);
    listModules(directory: string, recursively?: boolean): Promise<Record<ModuleExtension, string[]>>;
    private parseTypescriptModule;
    private createModule;
    private _openModules;
    openModules(parseModuleExports: ModuleExportsParser<T>, directory: string, recursively?: boolean): Promise<DynamicModule<T>[]>;
}
