/// <reference types="node" />
import { WriteFileOptions } from 'fs';
import { Logging } from '../logging';
export { WriteFileOptions } from 'fs';
export declare class FileUtils {
    protected logging: Logging;
    private basePath;
    constructor(logging: Logging, basePath: string);
    projectPath(): string;
    parseFilename(aPath: string): string;
    fullPath(filename: string, relativePath?: string): string;
    join(...subpaths: string[]): string;
    exist(filename: string, relativePath?: string): Promise<boolean>;
    fileExist(filename: string, relativePath?: string): Promise<boolean>;
    isDirectory(filename: string, relativePath?: string): Promise<boolean>;
    mkdir(directory: string, relativePath?: string): Promise<boolean>;
    readBuffer(filename: string, relativePath?: string): Promise<Buffer>;
    readFile(filename: string, relativePath?: string): Promise<string>;
    readJson<T>(filename: string, relativePath?: string): Promise<T>;
    writeBuffer(content: Buffer, filename: string, relativePath?: string): Promise<void>;
    writeFile(options: WriteFileOptions, content: string, filename: string, relativePath?: string): Promise<void>;
    writeJson(content: any, filename: string, relativePath?: string): Promise<void>;
    _listFiles({ directory, recursively }: {
        directory?: string;
        recursively?: boolean;
    }): Promise<string[]>;
    listFiles({ directory, recursively }: {
        directory: string;
        recursively?: boolean;
    }): Promise<string[]>;
    parsePath(aPath: string): {
        path: string;
        file: string;
    };
    hasExtension(aPath: string): boolean;
}
