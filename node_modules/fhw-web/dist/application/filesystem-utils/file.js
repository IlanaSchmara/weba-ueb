'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileUtils = void 0;
const path = require("path"); //see https://stackoverflow.com/a/34520891
const fs = require("fs"); //and again..
const fsp = fs.promises;
const helper_1 = require("../helper");
//TODO better file-type organization.
class FileUtils {
    constructor(logging, basePath) {
        this.logging = logging;
        this.basePath = basePath;
        const processPath = process.cwd();
        if (!basePath.includes(processPath)) {
            this.basePath = path.join(processPath, basePath);
        }
    }
    projectPath() {
        return this.basePath;
    }
    parseFilename(aPath) {
        return path.parse(aPath).name;
    }
    fullPath(filename, relativePath) {
        if (filename.includes(this.basePath)) {
            return relativePath
                ? path.join(relativePath, filename)
                : filename;
        }
        else {
            return relativePath
                ? path.join(this.basePath, relativePath, filename)
                : path.join(this.basePath, filename);
        }
    }
    join(...subpaths) {
        return path.join(...subpaths);
    }
    exist(filename, relativePath) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield fsp.stat(this.fullPath(filename, relativePath));
                return true;
            }
            catch (err) {
                return false;
            }
        });
    }
    fileExist(filename, relativePath) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const pathToFile = this.fullPath(filename, relativePath);
                const stats = yield fsp.stat(pathToFile);
                return stats.isFile();
            }
            catch (_e) {
                return false;
            }
        });
    }
    isDirectory(filename, relativePath) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const pathToFile = this.fullPath(filename, relativePath);
                const stats = yield fsp.stat(pathToFile);
                return stats.isDirectory();
            }
            catch (_e) {
                return false;
            }
        });
    }
    mkdir(directory, relativePath) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield fsp.mkdir(this.fullPath(directory, relativePath));
                return true;
            }
            catch (err) {
                return false;
            }
        });
    }
    readBuffer(filename, relativePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const fullPath = this.fullPath(filename, relativePath);
            try {
                const content = yield fsp.readFile(fullPath);
                return content;
            }
            catch (err) {
                throw new Error(`'File not Found: '${fullPath}`);
            }
        });
    }
    readFile(filename, relativePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const fullPath = this.fullPath(filename, relativePath);
            try {
                const content = yield fsp.readFile(fullPath, 'utf8');
                return content;
            }
            catch (err) {
                throw new Error(`'File not Found: '${fullPath}`);
            }
        });
    }
    readJson(filename, relativePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const name = path.parse(filename).name;
            const content = yield this.readFile(`${name}.json`, relativePath);
            try {
                return JSON.parse(content);
            }
            catch (err) {
                throw new Error(`Could not convert to json: ${err}`);
            }
        });
    }
    writeBuffer(content, filename, relativePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const fullPath = this.fullPath(filename, relativePath);
            try {
                yield fsp.writeFile(fullPath, content);
            }
            catch (err) {
                throw new Error(`Could not write buffer-file: ${err}`);
            }
        });
    }
    writeFile(options, content, filename, relativePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const name = path.parse(filename).name;
            const fullPath = this.fullPath(`${name}.json`, relativePath);
            try {
                fs.writeFileSync(fullPath, content, options);
            }
            catch (err) {
                throw new Error(`Could not write file: ${err}`);
            }
        });
    }
    writeJson(content, filename, relativePath) {
        return __awaiter(this, void 0, void 0, function* () {
            filename = filename.endsWith('.json') ? filename : `${filename}.json`;
            try {
                const json = JSON.stringify(content, null, 4);
                yield this.writeFile({ encoding: 'utf8' }, json, filename, relativePath);
            }
            catch (err) {
                throw new Error(`Could not write json file: ${err}`);
            }
        });
    }
    _listFiles({ directory, recursively = false }) {
        return __awaiter(this, void 0, void 0, function* () {
            directory = helper_1.isDefined(directory) ? directory : this.basePath;
            const stats = yield fsp.readdir(this.fullPath(directory), { withFileTypes: true });
            const paths = yield Promise.all(stats.map((stat) => __awaiter(this, void 0, void 0, function* () {
                const paths = [];
                if (stat.isDirectory() && recursively) {
                    const subFiles = yield this.listFiles({
                        directory: this.join(directory, stat.name),
                        recursively
                    });
                    const subPaths = subFiles.map(f => this.join(stat.name, f));
                    paths.push(...subPaths);
                }
                else if (stat.isFile()) {
                    paths.push(stat.name);
                }
                return paths;
            })));
            return paths.flat();
        });
    }
    listFiles({ directory, recursively = false }) {
        return __awaiter(this, void 0, void 0, function* () {
            const folderExists = yield this.exist(directory);
            return folderExists
                ? this._listFiles({ directory, recursively })
                : [];
        });
    }
    parsePath(aPath) {
        const { dir, base } = path.parse(aPath);
        return {
            path: dir,
            file: base
        };
    }
    hasExtension(aPath) {
        const { ext } = path.parse(aPath);
        return helper_1.isDefined(ext) && ext.length > 0;
    }
}
exports.FileUtils = FileUtils;
