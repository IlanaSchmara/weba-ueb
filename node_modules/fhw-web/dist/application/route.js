'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.MagicRoutes = exports.determineFilepath = exports.isControllerRoute = exports.isPageRoute = exports.isStaticRoute = exports.parseRoutes = void 0;
const route_1 = require("../public/route");
const helper_1 = require("./helper");
const http_1 = require("./http");
const toString = (obj) => helper_1.jsonStringify(obj, true);
const parseStaticRoute = (obj) => {
    if (Object.keys(obj).length > 2) {
        throw new Error(`Bei einer statischen Route sind neben den erlaubten Attributen ("url" und "static") unerlaubte Attribute angegeben: ${toString(obj)}`);
    }
    const result = {
        url: obj.url,
        static: obj.static
    };
    return result;
};
const parseRouteMethod = (obj) => {
    if (helper_1.isDefined(obj.method) && !helper_1.isArray(obj.method)) {
        throw new Error(`Bei einer Route ist die Deklaration des "method" Attributs fehlerhaft. Angegeben werden muss eine Liste von HTTP-Methoden: ${toString(obj)}`);
    }
    const methods = !helper_1.isDefined(obj.method)
        ? [route_1.DefaultMethod]
        : obj.method.map(m => http_1.parseMethod(m));
    return methods;
};
const parsePageRoute = (obj) => {
    if (Object.keys(obj).length > 3) {
        throw new Error(`Bei einer page Route sind neben den erlaubten Attributen (url, page, method) unerlaubte Attribute angegeben: ${toString(obj)}`);
    }
    const result = {
        url: obj.url,
        page: obj.page,
        method: parseRouteMethod(obj)
    };
    return result;
};
const parseControllerRoute = (obj) => {
    if (Object.keys(obj).length > 3) {
        throw new Error(`Bei einer controller Route sind neben den erlaubten Attributen (url, controller, method) unerlaubte Attribute angegeben: ${toString(obj)}`);
    }
    if (!helper_1.isDefined(obj.controller.file)) {
        throw new Error(`Bei einer controller Route fehlt in der "controller" Beschreibung das Attribut "file": ${toString(obj)}`);
    }
    if (!helper_1.isDefined(obj.controller.function)) {
        throw new Error(`Bei einer controller Route fehlt in der "controller" Beschreibung das Attribut "function": ${toString(obj)}`);
    }
    if (Object.keys(obj.controller).length > 2) {
        throw new Error(`Bei einer controller Route sind in der "controller" Beschreibung neben den erlaubten Attributen (file, function) unerlaubte Attribute angegeben: ${toString(obj)}`);
    }
    const result = {
        url: obj.url,
        controller: obj.controller,
        method: parseRouteMethod(obj)
    };
    return result;
};
exports.parseRoutes = (json) => {
    return json.map((entry) => {
        if (!helper_1.isDefined(entry.url)) {
            throw new Error(`Bei einer Route fehlt das "url" Attribut: ${toString(entry)}`);
        }
        else if (helper_1.isDefined(entry.static)) {
            return parseStaticRoute(entry);
        }
        else if (helper_1.isDefined(entry.page)) {
            return parsePageRoute(entry);
        }
        else if (helper_1.isDefined(entry.controller)) {
            return parseControllerRoute(entry);
        }
        throw new Error(`Eine Route stimmt nicht mit der Routen-Beschreibung Ã¼berein: ${toString(entry)}`);
    });
};
exports.isStaticRoute = (route) => {
    return helper_1.isDefined(route.static);
};
exports.isPageRoute = (route) => {
    return helper_1.isDefined(route.page);
};
exports.isControllerRoute = (route) => {
    return helper_1.isDefined(route.controller);
};
exports.determineFilepath = (routePath, params) => {
    const result = Object.keys(params).reduce((path, key) => {
        return helper_1.isInteger(+key)
            ? path.replace('*', params[key])
            : path.replace(`:${key}`, params[key]);
    }, routePath);
    return result;
};
exports.MagicRoutes = [
    {
        url: '/*',
        static: '*'
    },
    {
        url: '/*',
        page: '*'
    }
];
