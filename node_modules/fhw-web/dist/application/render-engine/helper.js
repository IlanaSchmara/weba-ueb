'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpersRegistration = void 0;
const helper_1 = require("../helper");
class HelpersRegistration {
    constructor(config, logging, fileUtils) {
        this.config = config;
        this.logging = logging;
        this.fileUtils = fileUtils;
        this.moduleLoader = this.fileUtils.createModuleLoader();
    }
    registerGlobalHelpers(hbs) {
        hbs.registerHelper('debugJson', (context) => {
            const pageData = context.data.root;
            const toReturn = `<pre>${JSON.stringify(pageData, null, 4)}</pre>`;
            return new hbs.SafeString(toReturn);
        });
    }
    parseCustomHelpers(_exports) {
        Object.keys(_exports).forEach(name => {
            if (!helper_1.isFunction(_exports[name])) {
                throw new Error(`Helper Function "${name}" is not a correctly declared function. Please read the docs.`);
            }
        });
        return _exports;
    }
    registerCustomHelpers(hbs) {
        return __awaiter(this, void 0, void 0, function* () {
            const helpers = yield this.moduleLoader.openModules(this.parseCustomHelpers, this.config.paths.helpers);
            const collissionCheck = new helper_1.CollisionCheck();
            helpers.forEach(module => {
                const { name: fileName, _exports } = module;
                Object.keys(_exports).forEach((functionsName) => {
                    const _function = _exports[functionsName];
                    if (!collissionCheck.verify(functionsName)) {
                        throw new Error(`Die Helper-Funktion "${functionsName}" im Controller ${fileName} wurde bereits in einem anderen Controller definiert.`);
                    }
                    hbs.registerHelper(functionsName, (...args) => {
                        args.pop(); //last argument contains an options object, we do not need it here
                        return _function(...args);
                    });
                });
            });
        });
    }
}
exports.HelpersRegistration = HelpersRegistration;
