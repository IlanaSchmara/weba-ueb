'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderEngine = void 0;
const Handlebars = require("handlebars"); //see https://stackoverflow.com/a/34520891
const promisedHandlebars = require("promised-handlebars");
const helper_1 = require("../helper");
const frontmatter_service_1 = require("./frontmatter-service");
const helper_2 = require("./helper");
const error_banner_template_hbs_1 = require("./templates/error-banner-template.hbs");
const any_error_template_hbs_1 = require("./templates/any-error-template.hbs");
const validation_error_template_hbs_1 = require("./templates/validation-error-template.hbs");
const template_file_service_1 = require("./template-file-service");
class RenderEngine {
    constructor(config, logging, fileUtils, databaseService) {
        this.config = config;
        this.logging = logging;
        this.fileUtils = fileUtils;
        this.databaseService = databaseService;
        this.helpers = new helper_2.HelpersRegistration(this.config, this.logging, this.fileUtils);
        this.templateFileService = new template_file_service_1.TemplateFileService(this.config, this.fileUtils, this.databaseService);
    }
    build() {
        return __awaiter(this, void 0, void 0, function* () {
            this.hbs = promisedHandlebars(Handlebars);
            this.helpers.registerGlobalHelpers(this.hbs);
            yield this.helpers.registerCustomHelpers(this.hbs);
            return this;
        });
    }
    reloadRenderer() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.config.helpers.reloadOnEveryRequest) {
                yield this.build();
            }
        });
    }
    _render(file, contentHtml) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logging.info(`render ${file.getName()}`);
            const frontmatter = file.getFrontmatter();
            this.hbs.registerHelper('content', () => {
                return new this.hbs.SafeString(contentHtml);
            });
            const makeIncludeHelper = (that, file) => {
                return function () {
                    return __awaiter(this, arguments, void 0, function* () {
                        const args = Array.from(arguments);
                        const context = args.pop();
                        const fragment = args.shift();
                        if (helper_1.isDefined(fragment)) {
                            const fragmentFrontmatter = args.length > 0
                                ? frontmatter_service_1.FrontmatterService.Merge(frontmatter, args.shift())
                                : frontmatter;
                            const templateHtml = yield that._renderTemplate(fragment, fragmentFrontmatter);
                            return new that.hbs.SafeString(templateHtml);
                        }
                        else {
                            that.logging.warn(`there is a include-helper without a specified filename in ${file.getName()}. Did you miss to put the filename in quotation marks, like in {{ include "fragment" }} ?`);
                            return '';
                        }
                    });
                };
            };
            this.hbs.registerHelper('include', makeIncludeHelper(this, file));
            let templateName = null;
            if (helper_1.isDefined(frontmatter.page.template)) {
                templateName = frontmatter.page.template;
                delete frontmatter.page.template;
            }
            const hbsTemplate = this.hbs.compile(file.getMarkup());
            // note: it's the 'promised-handlebars' api, function 'hbsTemplate' returns a promise
            let html = yield hbsTemplate(frontmatter);
            if (helper_1.isDefined(templateName)) {
                html = yield this._renderTemplate(templateName, frontmatter, html);
            }
            return html;
        });
    }
    _renderTemplate(filePath, frontmatter, contentHtml) {
        return __awaiter(this, void 0, void 0, function* () {
            const file = yield this.templateFileService.build(filePath, template_file_service_1.TemplateType.TEMPLATE, frontmatter);
            return this._render(file, contentHtml);
        });
    }
    renderTemplate(filePath, frontmatter) {
        return __awaiter(this, void 0, void 0, function* () {
            const file = yield this.templateFileService.build(filePath, template_file_service_1.TemplateType.TEMPLATE, frontmatter);
            return this._render(file);
        });
    }
    renderPage(filePath, frontmatter) {
        return __awaiter(this, void 0, void 0, function* () {
            const file = yield this.templateFileService.build(filePath, template_file_service_1.TemplateType.PAGE, frontmatter);
            return this._render(file);
        });
    }
    injectErrorHtml(html, errorHtml) {
        const bodytagClosingPosition = html.lastIndexOf('</body>');
        if (bodytagClosingPosition >= 0) {
            return `${html.substr(0, bodytagClosingPosition)}\n${errorHtml}\n${html.substr(bodytagClosingPosition)}`;
        }
        else {
            return `${html}\n${errorHtml}`;
        }
    }
    renderError(errorHtml) {
        return __awaiter(this, void 0, void 0, function* () {
            const frontmatter = frontmatter_service_1.FrontmatterService.From({
                global: {
                    errorHtml
                }
            });
            const file = yield this.templateFileService.from(error_banner_template_hbs_1.ErrorBannerTemplate, frontmatter);
            return yield this._render(file);
        });
    }
    renderAnyError(error, html) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logging.warn('an error page will be rendered');
            const frontmatter = frontmatter_service_1.FrontmatterService.From({
                global: {
                    error: {
                        name: error.name,
                        message: error.message,
                        stacktrace: error.stack
                    }
                }
            });
            const file = yield this.templateFileService.from(any_error_template_hbs_1.AnyErrorTemplate, frontmatter);
            const errorHtml = yield this.renderError(yield this._render(file));
            if (helper_1.isDefined(html)) {
                return this.injectErrorHtml(html, errorHtml);
            }
            else {
                return errorHtml;
            }
        });
    }
    renderValidationError(validation, html) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logging.warn('an error page will be rendered');
            const frontmatter = frontmatter_service_1.FrontmatterService.From({
                global: { validation, clientHtml: html }
            });
            const file = yield this.templateFileService.from(validation_error_template_hbs_1.ValidationErrorTemplate, frontmatter);
            const errorHtml = yield this.renderError(yield this._render(file));
            return this.injectErrorHtml(html, errorHtml);
        });
    }
}
exports.RenderEngine = RenderEngine;
