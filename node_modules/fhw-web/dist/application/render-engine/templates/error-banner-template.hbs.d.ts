export declare const ErrorBannerTemplate = "\n<template id=\"fhw-web-error\">\n\t<style>\n\t\t* {\n\t\t\tline-height: 1.6;\n\t\t\tbox-sizing: border-box;\n            font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n\t\t}\n\t\t#banner {\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 40px;\n\t\t\tpadding: 0 8px;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between;\n\t\t\talign-items: center;\n\t\t\tfont-size: 11pt;\n\t\t\tposition: fixed;\n\t\t\tcolor: white;\n\t\t\tbackground-color: #dc3546ad;\n\t\t}\n\t\t#banner span {\n\t\t\tfont-weight: bold;\n\t\t}\n\t\t#display-error {\n            font-size: 11pt;\n            color: black;\n\t\t\tbackground-color: white;\n\t\t\tpadding: 16px;\n\t\t\tmargin-top: 40px;\n\t\t\tborder: 4px dashed #dc3546ad;\n\t\t}\n\t\t#display-error h1 {\n\t\t\tmargin: 0;\n\t\t\tfont-size: 16pt;\n\t\t\tfont-weight: bold;\n\t\t}\n\t\t#display-error pre {\n\t\tfont-family: monospace;\n\t\t\twhite-space: break-spaces;\n\t\t}\n\t</style>\n\t<div id=\"banner\">\n\t\t<span>There are Errors you should resolve.</span>\n\t\t<button id=\"toggle-error\"></button>\n\t</div>\n\t<div id=\"display-error\">\n\t\t{{{ global.errorHtml }}}\n\t</div>\n</template>\n<fhw-web-error></fhw-web-error>\n<script defer>\n\tcustomElements.define('fhw-web-error',\n\t\tclass extends HTMLElement {\n\t\tconstructor() {\n\t\t\tsuper()\n\n\t\t\tlet template = document.querySelector('#fhw-web-error')\n\t\t\tlet templateContent = template.content\n\t\t\tthis.attachShadow({mode: 'open'}).appendChild(templateContent.cloneNode(true))\n\t\t\t\n\t\t\tfunction setupErrorButton(elem, container) {\n\t\t\t\tconst visibility = (function() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tis: () => localStorage.getItem('show-errors') == 'true',\n\t\t\t\t\t\tset: (visible) => localStorage.setItem('show-errors', ''+visible)\n\t\t\t\t\t}\n\t\t\t\t})()\n\n\t\t\t\tconst show = () => {\n\t\t\t\t\tvisibility.set(true)\n\t\t\t\t\telem.textContent = 'hide errors'\n\t\t\t\t\tcontainer.style.display = 'block'\n\t\t\t\t}\n\t\t\t\tconst hide = () => {\n\t\t\t\t\tvisibility.set(false)\n\t\t\t\t\telem.textContent = 'show errors'\n\t\t\t\t\tcontainer.style.display = 'none'\n\t\t\t\t}\n\t\t\t\telem.onclick = () => visibility.is() ? hide() : show()\n\n\t\t\t\tif (visibility.is()) {\n\t\t\t\t\tshow()\n\t\t\t\t} else {\n\t\t\t\t\thide()\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst errorToggle = this.shadowRoot.querySelector('#toggle-error')\n\t\t\tconst errorDisplay = this.shadowRoot.querySelector('#display-error')\n\t\t\tsetupErrorButton(errorToggle, errorDisplay)\n\t\t}\n\t})\n</script>\n";
