'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseConfig = void 0;
const config_1 = require("../public/config");
const helper_1 = require("./helper");
const decide = (toVerify, _default) => {
    return helper_1.isDefined(toVerify) ? toVerify : _default;
};
const parseRootPath = (toVerify, _default) => {
    return decide(toVerify, _default);
};
const parseLanguage = (toVerify, _default) => {
    return helper_1.isDefined(toVerify)
        ? Object.values(config_1.Languages).find(lang => toVerify === lang) || _default
        : _default;
};
const isOneOfLogging = (toVerify, _default) => {
    // TODO possible Optimization with Logging[toVerify]
    return helper_1.isDefined(Object.values(config_1.LoggingTypes).find(log => toVerify === log));
};
const parseLoggingActive = (toVerify, _default) => {
    return helper_1.isDefined(toVerify) && helper_1.isArray(toVerify)
        ? toVerify.reduce((acc, log) => {
            if (isOneOfLogging(log, _default)) {
                acc.push(log);
            }
            return acc;
        }, []) || _default
        : _default;
};
const parseServerConfig = (toVerify, _default) => {
    return helper_1.isDefined(toVerify)
        ? {
            host: decide(toVerify.host, _default.host),
            port: decide(toVerify.port, _default.port),
            logging: decide(toVerify.logging, _default.logging)
        }
        : _default;
};
const parseRoutingConfig = (toVerify, _default) => {
    return helper_1.isDefined(toVerify)
        ? {
            magic: decide(toVerify.magic, _default.magic),
            fileName: decide(toVerify.fileName, _default.fileName),
            fileExtension: decide(toVerify.fileExtension, _default.fileExtension),
            reloadOnEveryRequest: decide(toVerify.reloadOnEveryRequest, _default.reloadOnEveryRequest),
            logging: decide(toVerify.logging, _default.logging)
        }
        : _default;
};
const parseTemplatingConfig = (toVerify, _default) => {
    return helper_1.isDefined(toVerify)
        ? {
            validation: decide(toVerify.validation, _default.validation),
            paths: helper_1.isDefined(toVerify.paths)
                ? {
                    pages: decide(toVerify.paths.pages, _default.paths.pages),
                    templates: decide(toVerify.paths.templates, _default.paths.templates),
                    helpers: decide(toVerify.paths.helpers, _default.paths.helpers),
                    controller: decide(toVerify.paths.controller, _default.paths.controller)
                }
                : _default.paths,
            allowedExtensions: decide(toVerify.allowedExtensions, _default.allowedExtensions),
            frontmatterFormat: decide(toVerify.frontmatterFormat, _default.frontmatterFormat),
            helpers: helper_1.isDefined(toVerify.helpers)
                ? {
                    reloadOnEveryRequest: decide(toVerify.helpers.reloadOnEveryRequest, _default.helpers.reloadOnEveryRequest)
                }
                : _default.helpers,
            logging: decide(toVerify.logging, _default.logging)
        }
        : _default;
};
const parseSessionsConfig = (toVerify, _default) => {
    return helper_1.isDefined(toVerify)
        ? {
            active: decide(toVerify.active, _default.active),
            path: decide(toVerify.path, _default.path),
            logging: decide(toVerify.logging, _default.logging)
        }
        : _default;
};
const parseDatabaseConfig = (toVerify, _default) => {
    return helper_1.isDefined(toVerify)
        ? {
            globalData: helper_1.isDefined(toVerify.globalData)
                ? {
                    active: decide(toVerify.globalData.active, _default.globalData.active),
                    reloadOnEveryRequest: decide(toVerify.globalData.reloadOnEveryRequest, _default.globalData.reloadOnEveryRequest),
                    pathToFile: decide(toVerify.globalData.pathToFile, _default.globalData.pathToFile),
                    format: decide(toVerify.globalData.format, _default.globalData.format),
                    logging: decide(toVerify.globalData.logging, _default.globalData.logging)
                }
                : _default.globalData,
            fileData: helper_1.isDefined(toVerify.fileData)
                ? {
                    active: decide(toVerify.fileData.active, _default.fileData.active),
                    reloadOnEveryRequest: decide(toVerify.fileData.reloadOnEveryRequest, _default.fileData.reloadOnEveryRequest),
                    path: decide(toVerify.fileData.path, _default.fileData.path),
                    format: decide(toVerify.fileData.format, _default.fileData.format),
                    logging: decide(toVerify.fileData.logging, _default.fileData.logging)
                }
                : _default.fileData,
            sqliteData: helper_1.isDefined(toVerify.sqliteData)
                ? {
                    active: decide(toVerify.sqliteData.active, _default.sqliteData.active),
                    reloadOnEveryRequest: decide(toVerify.sqliteData.reloadOnEveryRequest, _default.sqliteData.reloadOnEveryRequest),
                    pathToFile: decide(toVerify.sqliteData.pathToFile, _default.sqliteData.pathToFile),
                    logging: decide(toVerify.sqliteData.logging, _default.sqliteData.logging)
                }
                : _default.sqliteData,
        }
        : _default;
};
exports.parseConfig = (toVerify) => {
    return helper_1.isDefined(toVerify)
        ? {
            rootPath: parseRootPath(toVerify.rootPath, config_1.DefaultConfig.rootPath),
            language: parseLanguage(toVerify.language, config_1.DefaultConfig.language),
            loggingActive: parseLoggingActive(toVerify.loggingActive, config_1.DefaultConfig.loggingActive),
            server: parseServerConfig(toVerify.server, config_1.DefaultConfig.server),
            routing: parseRoutingConfig(toVerify.routing, config_1.DefaultConfig.routing),
            templating: parseTemplatingConfig(toVerify.templating, config_1.DefaultConfig.templating),
            sessions: parseSessionsConfig(toVerify.sessions, config_1.DefaultConfig.sessions),
            database: parseDatabaseConfig(toVerify.database, config_1.DefaultConfig.database),
        }
        : config_1.DefaultConfig;
};
