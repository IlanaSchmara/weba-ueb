'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingService = exports.FakeLogging = exports.Logging = void 0;
const config_1 = require("../../public/config");
const colors = require('colors');
const themeConfig = {
    info: 'brightCyan',
    data: 'grey',
    warn: 'brightYellow',
    error: 'brightRed',
    debug: 'brightBlue'
};
colors.setTheme(themeConfig);
class Logging {
    constructor(tag, shouldLog, loggingActive) {
        this.tag = tag;
        this.shouldLog = shouldLog;
        this.loggingActive = loggingActive;
    }
    log(type, ...args) {
        if (this.loggingActive.includes(type) && this.shouldLog) {
            let tag = `[${this.tag}]`;
            console.log(colors[type](...[tag, ...args]));
        }
    }
    info(...args) {
        this.log(config_1.LoggingTypes.INFO, ...args);
    }
    data(...args) {
        this.log(config_1.LoggingTypes.DATA, ...args);
    }
    warn(...args) {
        this.log(config_1.LoggingTypes.WARN, ...args);
    }
    error(...args) {
        this.log(config_1.LoggingTypes.ERROR, ...args);
    }
    debug(...args) {
        this.log(config_1.LoggingTypes.DEBUG, ...args);
    }
}
exports.Logging = Logging;
class FakeLogging extends Logging {
    constructor() {
        const tag = '';
        const shouldLog = false;
        super(tag, shouldLog, []);
    }
}
exports.FakeLogging = FakeLogging;
class LoggingService {
    constructor(loggingActive) {
        this.loggingActive = loggingActive;
    }
    create(tag, shouldLog) {
        return new Logging(tag, shouldLog, this.loggingActive);
    }
}
exports.LoggingService = LoggingService;
