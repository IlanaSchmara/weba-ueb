import { Config } from '../../public/config';
import { Route, StaticRoute, PageRoute, ControllerRoute } from '../../public/route';
import { GlobalData } from '../../public/global';
import { RequestData } from '../../public/request';
import { Session } from '../../public/session';
import { Logging } from '../logging';
import { FileUtils } from '../filesystem-utils';
import { DatabaseService } from '../database';
import { RenderEngine } from '../render-engine';
import { Validator } from '../validator';
import { Response, ResponseStatic, ResponseHtml } from '../http';
import { SessionService } from '../http';
import { Frontmatter } from '../../public/frontmatter';
export declare class ResponseService {
    private config;
    private logging;
    private fileUtils;
    private renderEngine;
    private validator;
    private databaseService;
    private htmlService;
    private controllerService;
    constructor(config: Config, logging: Logging, fileUtils: FileUtils, renderEngine: RenderEngine, validator: Validator, databaseService: DatabaseService);
    build(): Promise<ResponseService>;
    serve(route: Route, request: RequestData, sessionService: SessionService): Promise<Response>;
    serveErrorPage(error: Error): Promise<string>;
    serveStatic(route: StaticRoute, request: RequestData): Promise<ResponseStatic>;
    servePage(ressource: string | PageRoute, frontmatter: Frontmatter): Promise<ResponseHtml>;
    serveFragment(ressource: string | PageRoute, frontmatter: Frontmatter): Promise<ResponseHtml>;
    private processControllerResult;
    serveController(route: ControllerRoute, globalData: GlobalData, request: RequestData, session: Session): Promise<Response>;
}
