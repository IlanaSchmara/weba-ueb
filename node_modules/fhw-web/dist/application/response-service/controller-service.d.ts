import { TemplatingConfig } from '../../public/config';
import { ControllerRoute } from '../../public/route';
import { ControllerFunction, ControllerResult, TextResult, JsonResult, RedirectResult, PageResult, FragmentResult } from '../../public/controller';
import { GlobalData } from '../../public/global';
import { RequestData } from '../../public/request';
import { Session } from '../../public/session';
import { Database } from '../../public/database';
import { Logging } from '../logging';
import { FileUtils } from '../filesystem-utils';
export declare const isTextResult: (result: ControllerResult) => result is TextResult;
export declare const isJsonResult: (result: ControllerResult) => result is JsonResult;
export declare const isRedirectResult: (result: ControllerResult) => result is RedirectResult;
export declare const isPageResult: (result: ControllerResult) => result is PageResult;
export declare const isFragmentResult: (result: ControllerResult) => result is FragmentResult;
export declare const parseControllerFunction: (_exports: Record<string, any>) => Record<string, ControllerFunction>;
export declare class ControllerService {
    private config;
    private logging;
    private fileUtils;
    private moduleLoader;
    private allController;
    constructor(config: TemplatingConfig, logging: Logging, fileUtils: FileUtils);
    build(): Promise<ControllerService>;
    callController(route: ControllerRoute, globalData: GlobalData, request: RequestData, session: Session, database: Database): Promise<ControllerResult>;
}
