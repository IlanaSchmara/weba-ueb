'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HtmlService = void 0;
const route_1 = require("../route");
class HtmlService {
    constructor(config, logging, fileUtils, renderEngine, validator) {
        this.config = config;
        this.logging = logging;
        this.fileUtils = fileUtils;
        this.renderEngine = renderEngine;
        this.validator = validator;
    }
    validate(html) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const validation = yield this.validator.validate(html);
                if (validation.results.length > 0) {
                    const errorHtml = yield this.renderEngine.renderValidationError(validation, html);
                    return [false, errorHtml];
                }
                else {
                    return [true, html];
                }
            }
            catch (error) {
                const errorHtml = yield this.renderEngine.renderAnyError(error, html);
                return [false, errorHtml];
            }
        });
    }
    parsePagePath(route, params) {
        return route_1.determineFilepath(route.page, params);
    }
    parsePage(ressource, frontmatter) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.renderEngine.reloadRenderer();
            const pagePath = typeof ressource === 'string'
                ? ressource
                : this.parsePagePath(ressource, frontmatter.request.path);
            return yield this.renderEngine.renderPage(pagePath, frontmatter);
        });
    }
    parseTemplate(ressource, frontmatter) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.renderEngine.reloadRenderer();
            const pagePath = typeof ressource === 'string'
                ? ressource
                : this.parsePagePath(ressource, frontmatter.request.path);
            return yield this.renderEngine.renderTemplate(pagePath, frontmatter);
        });
    }
}
exports.HtmlService = HtmlService;
