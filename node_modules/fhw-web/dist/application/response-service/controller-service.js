'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControllerService = exports.parseControllerFunction = exports.isFragmentResult = exports.isPageResult = exports.isRedirectResult = exports.isJsonResult = exports.isTextResult = void 0;
const helper_1 = require("../helper");
exports.isTextResult = (result) => {
    return helper_1.isDefined(result.text);
};
exports.isJsonResult = (result) => {
    return helper_1.isDefined(result.json);
};
exports.isRedirectResult = (result) => {
    return helper_1.isDefined(result.redirect);
};
exports.isPageResult = (result) => {
    return helper_1.isDefined(result.page);
};
exports.isFragmentResult = (result) => {
    return helper_1.isDefined(result.fragment);
};
exports.parseControllerFunction = (_exports) => {
    Object.keys(_exports).forEach(name => {
        if (!helper_1.isFunction(_exports[name]) && !helper_1.isAsyncFunction(_exports[name])) {
            throw new Error(`Controller Function "${name}" is not a correctly declared function. Please read the docs.`);
        }
    });
    return _exports;
};
class ControllerService {
    constructor(config, logging, fileUtils) {
        this.config = config;
        this.logging = logging;
        this.fileUtils = fileUtils;
        this.moduleLoader = this.fileUtils.createModuleLoader();
    }
    build() {
        return __awaiter(this, void 0, void 0, function* () {
            this.allController = yield this.moduleLoader.openModules(exports.parseControllerFunction, this.config.paths.controller);
            return this;
        });
    }
    callController(route, globalData, request, session, database) {
        return __awaiter(this, void 0, void 0, function* () {
            const controller = this.allController.find(({ name }) => {
                return this.fileUtils.parseFilename(name) === route.controller.file;
            });
            if (!helper_1.isDefined(controller)) {
                throw new Error(`Can not find Controller File "${route.controller.file}"`);
            }
            const _function = controller._exports[route.controller.function];
            if (!helper_1.isDefined(_function)) {
                throw new Error(`Can not call function "${route.controller.function}" in Controller File "${route.controller.file}". Did you forget to export or to define the function?`);
            }
            const dataArgument = {
                request,
                session,
                global: globalData
            };
            return _function(dataArgument, database);
        });
    }
}
exports.ControllerService = ControllerService;
